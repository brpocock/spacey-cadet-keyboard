// Spacey Cadet keyboard layout
// Offered into the Public Domain by Bruce-Robert Pocock <brpocock@star-hope.org>
// CC-0 license.

/// This is /usr/share/X11/xkb/compat/spacey

xkb_compatibility "spacey" {

    virtual_modifiers NumLock,Alt,LevelThree,LAlt,RAlt,RControl,LControl,ScrollLock,LevelFive,Shift,Control,Meta,AltGr,Super,Hyper,Lock;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;
    interpret Shift_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret Shift_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Shift,clearLocks);
    };
    interpret Control_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Control,clearLocks);
    };
    interpret Control_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Control,clearLocks);
    };
    interpret Meta_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt+Meta,clearLocks);
    };
    interpret Meta_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Alt+Meta,clearLocks);
    };
    interpret Super_L+AnyOfOrNone(all) {
        action= SetMods(modifiers=Super,clearLocks);
    };
    interpret Hyper_R+AnyOfOrNone(all) {
        action= SetMods(modifiers=Hyper,clearLocks);
    };
    interpret ISO_Level3_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelThree,clearLocks);
    };
    interpret ISO_Level5_Shift+AnyOfOrNone(all) {
        action= SetMods(modifiers=LevelFive,clearLocks);
    };
    interpret Shift_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Shift);
    };
    interpret Caps_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=Lock);
    };
    interpret ISO_Level5_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelFive);
    };
    interpret ISO_Level3_Lock+AnyOfOrNone(all) {
        action= LockMods(modifiers=LevelThree+LevelFive);
    };
    // virtual_modifiers Shift,Control,Alt,Meta,AltGr,LevelThree,LevelFive,Super,Hyper,Lock;

    // interpret.useModMapMods = AnyLevel;
    // interpret.repeat = False;
    // interpret.locking = False;

    // interpret Shift_L { action = SetMods(modifiers=Shift,clearLocks); };
    // interpret Shift_R { action = SetMods(modifiers=Shift,clearLocks); };

    // interpret Control_L { action = SetMods(modifiers=Control,clearLocks); };
    // interpret Control_R { action = SetMods(modifiers=Control,clearLocks); };

    // interpret Meta_L { action = SetMods(modifiers=Alt+Meta,clearLocks); };
    // interpret Meta_R { action = SetMods(modifiers=Alt+Meta,clearLocks); };

    // interpret Super_L { action = SetMods(modifiers=Super,clearLocks); };

    // interpret Hyper_R { action = SetMods(modifiers=Hyper,clearLocks); };

    // interpret ISO_Level3_Shift
    //                       { action= SetMods(modifiers=LevelThree,clearLocks); };
    // interpret ISO_Level5_Shift
    //                       { action = SetMods(modifiers=LevelFive,clearLocks); };

    // interpret Shift_Lock { action = LockMods(modifiers=Shift); };
    // interpret Caps_Lock { action = LockMods(modifiers=Lock); };
    // interpret ISO_Level5_Lock { action = LockMods(modifiers=LevelFive); };
    // interpret ISO_Level3_Lock
    //                      { action = LockMods(modifiers=LevelThree+LevelFive); };

    // group2 = AltGr;
    // group3 = LevelFive;
    // group4 = AltGr+LevelFive;

    // indicator "Caps Lock" {
    //     !allowExplicit;
    //     whichModState= locked;
    //     modifiers= Lock;
    // };
//    indicator "Group 2" {
//        !allowExplicit;
//        groups= 0xfe;
//    };
//    indicator "Mouse Keys" {
//        indicatorDrivesKeyboard;
//        controls= mouseKeys;
//    };

};
