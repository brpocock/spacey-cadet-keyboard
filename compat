// Spacey Cadet keyboard layout
// Offered into the Public Domain by Bruce-Robert Pocock <brpocock@star-hope.org>
// CC-0 license.

/// This is /usr/share/X11/xkb/compat/spacey

xkb_compatibility "spacey" {

    virtual_modifiers RControl,LControl,Shift,Lock,Control,AltGr,LevelFive,Meta,Super,Hyper;

    interpret.useModMapMods= AnyLevel;
    interpret.repeat= False;
    interpret.locking= False;

   //  // Shift (and Caps Lock)
   //  interpret Shift_L+AnyOfOrNone(all) {
   //      action= SetMods(modifiers=Shift,clearLocks);
   //  };
   //  interpret Shift_R+AnyOfOrNone(all) {
   //      action= SetMods(modifiers=Shift,clearLocks);
   //  };
   //  interpret Shift_Lock+AnyOfOrNone(all) {
   //      action= LockMods(modifiers=Shift);
   //  };
   //  interpret Caps_Lock+AnyOfOrNone(all) {
   //      action= LockMods(modifiers=Lock);
   //  };

   //  // AltGr
   //  interpret ISO_Level3_Shift+AnyOf(all) {
   //      virtualModifier= AltGr;
   //      useModMapMods=level1;
   //      action= SetMods(modifiers=AltGr,clearLocks);
   //  };
   //  interpret ISO_Level3_Latch+AnyOf(all) {
   //      virtualModifier= AltGr;
   //      useModMapMods=level1;
   //      action= LatchMods(modifiers=AltGr,clearLocks,latchToLock);
   //  };
   //  interpret ISO_Level3_Lock+AnyOf(all) {
   //      virtualModifier= AltGr;
   //      useModMapMods=level1;
   //      action= LockMods(modifiers=AltGr);
   //  };

   //  // Greek
   //  interpret ISO_Level5_Shift+AnyOfOrNone(all) {
   //      action= SetMods(modifiers=LevelFive,clearLocks);
   //  };
   //  interpret ISO_Level5_Lock+AnyOfOrNone(all) {
   //      action= LockMods(modifiers=LevelFive);
   //  };
   //  // interpret ISO_Level3_Lock+AnyOfOrNone(all) {
   //  //     action= LockMods(modifiers=LevelThree+LevelFive);
   //  // };


   //  // Control
   //  interpret Control_L+AnyOfOrNone(all) {
   //      action= SetMods(modifiers=Control,clearLocks);
   //  };
   //  interpret Control_R+AnyOfOrNone(all) {
   //      action= SetMods(modifiers=Control,clearLocks);
   //  };

   //  // Meta
   //  interpret Meta_L+AnyOfOrNone(all) {
   //      // virtualModifier = Alt+Meta;
   //      action= SetMods(modifiers=modMapMods,clearLocks);
   //  };
   //  interpret Meta_R+AnyOfOrNone(all) {
   //       // virtualModifier = Alt+Meta;
   //       action= SetMods(modifiers=modMapMods,clearLocks);
   //  };

   //  // Super
   //  interpret Super_L+AnyOfOrNone(all) {
   //      virtualModifier= Super;
   //      action= SetMods(modifiers=Super,clearLocks);
   //  };

   //  // Hyper
   //  interpret Hyper_R+AnyOf(all) {
   //      virtualModifier= Hyper;
   //      action= SetMods(modifiers=modMapMods,clearLocks);
   //  };

   //  // group2 = AltGr;
   //  // group3 = LevelFive;
   //  // group4 = AltGr+LevelFive;

   //  indicator "Caps Lock" {
   //      !allowExplicit;
   //      whichModState= locked;
   //      modifiers= Lock;
   //  };
   // indicator "Group 2" {
   //     !allowExplicit;
   //     groups= 0xfe;
   // };
   // indicator "Mouse Keys" {
   //     indicatorDrivesKeyboard;
   //     controls= mouseKeys;
   // };

};
